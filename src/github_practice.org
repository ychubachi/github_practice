#+STARTUP: overview indent align logdone hidestars hideblocks
#+TITLE: Git/GitHub演習
#+AUTHOR: 中鉢 欣秀
#+OPTIONS: ^:{}
#+EXPORT_FILE_NAME: ../docs/index.html
# #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup

#+begin_comment
+ HTML形式でこの文書全体をエキスポートする方法
  * スタイルはSETUPFILEで設定
  * エキスポートするファイル名はEXPORT_FILE_NAMEで設定
  * C-c C-e h hでエキスポートし、GitHubにコミット
  * https://blog.chubachi.net/github_practice/
#+end_comment

#+begin_comment
# #+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>
# #+HTML_HEAD: <style>font-family: "Helvetica Neue", "Helvetica", "Hiragino Sans", "Hiragino Kaku Gothic ProN", "Arial", "Yu Gothic", "Meiryo", sans-serif;</style>
#+HTML_HEAD: <style>body { line-height: 150% }</style>
#+end_comment

* Git/GitHub演習の概要
** Git/GitHub演習について
*** 演習の概要
**** この演習について
- この授業ではGitの初心者が，基礎的なGitコマンドの利用方法から，
  GitHub Flowに基づく協同開発の方法までを学ぶ

**** 事前準備
- 事前に gitコマンドが利用できる環境を用意しておくこと
- CUI端末でのshellによる基本的な操作を知っていると
  スムーズに演習ができる

**** 授業の構成
- 個人演習では，テキストの指示に従い，
  Git/GitHubを利用するにあたり必要となる知識を学ぶ
- チーム演習では，GitHubを活用した協同開発の方法を深く学ぼう

**** 授業の進め方
1. 演習の解説
  - 講師が授業の進め方を説明する
2. Git/GitHubを学ぶ個人演習
  - 個人演習を通してGit/GitHubの使い方を学ぶ
3. チーム演習
  - チームでの開発演習を実施する

*** COMMENT 個人演習からチーム演習へ
**** 個人演習からチーム演習への流れ
- この授業では最初に個人演習を行い，その後，チームによる演習に進む
- その際，チーム編成が既に済んでいるか，または，
  そうでないかで演習の進め方が異なる

**** チーム編成が済んでいる場合
- 個人演習としてテキストの課題に取り組む
- テキストを終えたメンバーは他のメンバーを積極的に助ける
- 全員がテキストを終えることを目指す
- 全員が完了，もしくは，時間になったらチーム演習に進む

**** チームがまだできていない場合
- 後ほど席の移動をするので荷物をまとめておく
- 個人演習としてテキストの課題に取り組む
- テキストを完了したら講師・TAに伝えること
- その後，チーム編成を経てチーム演習に進む

**** チームがまだできていない場合の編成方法
- 個人演習が完了した者から順番に2名づつのペアを組んでいく
- できたペアは空いている席に移動して，チーム演習を開始する
- 受講者の半数がペアになったら，それ以降にテキストを終えた者は
  既存のペアに追加していく
- 最終的に3〜4人のグループにする

*** COMMENT 成績評価の方法
**** チーム演習の評価
- チーム演習でのGitHubのリポジトリを対象に，主に以下の項目について評価する
  - コミットの数
  - コミットの粒度（意味のある単位でできるだけ細かく）
  - コミットメッセージの分かりやすさ
  - ブランチの名前が作業内容を表しているか
  - プルリクエストの活用
  - コンフリクトの解消ができたか
  - WikiやIssueの活用
  - README/LICENCE
- _ようするに「GitHub Flow」がうまく回せたか？_

**** 提出物(1)
  - 名前
  - 学籍番号
  - GitHubのアカウント名
  - GitHubのリポジトリのWeb URL
    - 個人演習「our_enpit」
    - チーム演習「team_enpit」

**** 提出物(2)
  - 各自が行った作業の内容
  - 自分が作成したコミット数
  - 自己評価
    - 5段階：5はとても優れている，4は優れている，3は普通，2は劣っている
  - 自己評価の理由
  - 演習全体の感想

**** 成果物の提出方法と補足資料
- 成果物の提出方法や，その他の補足資料はWikiを参照
  - [[https://github.com/ychubachi/github_practice/wiki][Home · ychubachi/github_practice Wiki]]

* 個人演習編
:PROPERTIES:
:ID:       12a59805-4284-4b19-9b8f-95ebdbc03ed1
:CUSTOM_ID: personal
:END:
** ローカルリポジトリでGitを使う
*** Gitの操作方法と初期設定
**** Gitチートシート（カンニング表）
- 主なGitコマンドの一覧表
  - [[https://training.github.com/downloads/ja/github-git-cheat-sheet/][GitHub Git チートシート - GitHub Cheatsheets]]
- 必要に応じて印刷しておくとよい

**** Gitコマンドの実行確認
- 端末を操作してGitコマンドを起動してみよう．
- 次のとおり操作することでGitのバージョン番号が確認できる．

#+BEGIN_SRC bash
git --version
#+END_SRC

**** 名前とメールアドレスの登録
- （まだなら）gitに名前とメールアドレスを登録しておく
- 次のコマンドの$NAMEと$EMAILを各自の名前とメールアドレスに置き換えて実行せよ
  - 名前はローマ字で設定すること

#+BEGIN_SRC bash
git config --global user.name $NAME
git config --global user.email $EMAIL
#+END_SRC

**** COMMENT その他の設定
- 次のとおり，設定を行っておく

#+BEGIN_SRC bash
git config --global color.ui auto
git config --global push.default simple
git config --global core.editor emacs
#+END_SRC
  - 1行目: 色付きで表示を見やすく
  - 2行目: pushする方法（詳細省略）
  - 3行目: vimを使う場合はemacsではなくvimを

**** 設定の確認方法
- ここまでの設定を確認する

#+BEGIN_SRC bash
git config -l
#+END_SRC

*** Gitのリポジトリ
**** プロジェクト用のディレクトリ
- リポジトリとはプロジェクトでソースコードなどを
  配置するディレクトリ
  - このディレクトリを「ワーキングディレクトリ
    （ないしはワーキングツリー）」とも言う
- Gitによりバージョン管理ができる
  - ファイルに対する編集作業の内容が追跡され，記録される
- 将来的にGitHubと連携させることで共同作業ができるようになる

**** Gitリポジトリを利用するには
- リポジトリを利用する方法には主に2種類ある
  1. git initコマンドで初期化する方法
  2. git cloneコマンドでGitHubから入手する方法
- ここでは，まず1.について解説する

**** Gitリポジトリの初期化方法
- Gitリポジトリ（my_project）を作成する
  - 1〜2行目: ディレクトリを作成して移動
  - 3行目: Gitリポジトリとして初期化

#+begin_src bash
mkdir ~/my_project
cd ~/my_project
git init
#+end_src

- 以降の作業は作成したmy_projectディレクトリで行うこと
  - 現在のディレクトリは「pwd」コマンドで確認できる

**** リポジトリの状態を確認する方法
- 現在のリポジトリの状態を確認するコマンドは次のとおり

#+begin_src bash
git status
#+end_src

- このコマンドは頻繁に使用する
- 何かうまく行かないことがあったら，このコマンドで状態を確認する癖を
  つけるとよい
  - 表示される内容の意味は徐々に覚えていけば良い

**** COMMENT 「.git」ディレクトリを壊すべからず
- ティレクトリにリポジトリを作成すると「.git」という隠しディレクトリが
  できる
  - ls -aで確認できるが…
- このディレクトリは *絶対に* 手動で変更してはならない
  - もし削除したらGitとは無関係の単なるディレクトリになる

*** コミットの作成方法
**** コミットについて(1)
- Gitの用語における「コミット」とは，「ひとかたまりの作業」をいう
  - 新しい機能を追加した，バグを直した，ドキュメントの内容を更新した，など
- Gitは作業の履歴を，コミットを単位として管理する
  - コミットは次々にリポジトリに追加されていく
  - これにより古いバージョンに戻る，
    過去の変更内容を確認する，などの操作ができる
**** コミットについて(2)
     - コミットには，作業の内容を説明するメッセージをつける
     - コミットには自動的にIDが振られることも覚えておくと良い

**** READMEファイルの作成
- my_projectリポジトリにREADMEファイルを作成してみよう

#+BEGIN_SRC bash
echo "My README file." > README
#+END_SRC

- プロジェクトには *必ずREADMEファイルを用意* しておくこと

**** リポジトリの状態の確認
- git statusで現在のリポジトリの状態を確認する

#+BEGIN_SRC bash
git status
#+END_SRC

- 未追跡のファイル（Untracked files:）の欄に作成したREADMEファイルが
  （赤色で）表示される

**** 変更内容のステージング
- コミットの一つ手前にステージングという段階がある
  - コミットしたい変更はステージングしておく
  - 逆に言えば，変更をコミットするためには，
    ステージングしておかなくてはならない
- ファイルのトラッキング
  - 新しいファイルをステージングすると，これ以降，
    gitがそのファイルの変更を追跡するようになる

**** ステージングの実行
- 作成したREADMEファイルをステージングするには，次のコマンドを打つ

#+BEGIN_SRC bash
git add .
#+END_SRC

- 「git add」の「.（ピリオド）」を忘れないように
  - ピリオドは，リポジトリにおけるすべての変更を意味する
  - 複数のファイルを変更した場合には，ファイル名を指定して
    部分的にステージングすることもできる…
    - が，このやりかたは好ましくない
    - 一度に複数の変更を行うのではなく，一つの変更を終えたら
      こまめにコミットする

**** ステージング後のリポジトリへの状態
- 再度，git statusコマンドで状態を確認しよう

#+BEGIN_SRC bash
git status
#+END_SRC

- コミットされる変更（Changes to be committed:）の欄に，READMEファイルが
  （緑色で）表示されれば正しい結果である

**** ステージングされた内容をコミットする
- ステージング段階にある変更内容をコミットする
- コミットにはその内容を示すメッセージ文をつける
- 「First commit」というメッセージをつけて新しいコミットを作成する
  - 「-m」オプションはそれに続く文字列をメッセージとして付与することを
    指示するもの

#+BEGIN_SRC bash
git commit -m 'First commit'
#+END_SRC

**** コミット後の状態の確認
- コミットが正常に行われたことを確認する
  - ここでもgit statusコマンドか活躍する

#+BEGIN_SRC bash
git status
#+END_SRC

- 「nothing to commit, ...」との表示から
  コミットすべきものがない（＝過去の変更はコミットされた）ことが
  わかる
- この表示がでたら（無事コミットできたので）一安心してよい

*** 変更履歴の作成
**** 更なるコミットを作成する
- リポジトリで変更作業を行い，新しいコミットを追加する
  - READMEファイルに新しい行を追加する
- 次の$NAMEをあなたの名前に変更して実行しなさい

#+BEGIN_SRC bash
echo $NAME >> README
#+END_SRC

- 既存のファイルへの追加なので「>>」を用いていることに注意

**** 変更後の状態の確認
- リポジトリの状態をここでも確認する

#+BEGIN_SRC bash
git status
#+END_SRC

- コミットのためにステージされていない変更（Changes not staged for commit:）の
  欄に，変更された（modified）ファイルとしてREADMEが表示される

**** 差分の確認
- トラックされているファイルの変更箇所を確認する

#+BEGIN_SRC bash
git diff
#+END_SRC

- 頭に「+」のある（緑色で表示された）行が新たに追加された内容を示す
  - 削除した場合は「-」がつく

**** 新たな差分をステージングする
- 作成した差分をコミットできるようにするために，ステージング段階に上げる

#+BEGIN_SRC bash
git add .
#+END_SRC

- =git status= を行い，READMEファイルが「Changed to be commited:」の欄に
  （緑色で）表示されていることを確認する

**** ステージングされた新しい差分のコミット
- 変更内容を示すメッセージとともにコミットする

#+BEGIN_SRC bash
git commit -m 'Add my name'
#+END_SRC

*** 履歴の確認
**** バージョン履歴の確認
- これまでの変更作業の履歴を確認
  - 2つのコミットが存在する

#+BEGIN_SRC bash
git log
#+END_SRC

- 各コミットごとに表示される内容
  - コミットのID（commit に続く英文字と数字の列）
  - AuthorとDate
  - コミットメッセージ

**** コミットの情報確認
- 次のコマンドでコミットで行った変更内容が確認できる

#+BEGIN_SRC bash
git show $COMMIT_ID
#+END_SRC

**** 2つのコミットの比較
- 異なる２つのコミットの変更差分は次のコマンドで確認できる
  - コミットのIDはlogで確認できる
    （コマンドでIDを指定する場合は，概ね先頭4文字を入力し後は省略してよい）

#+BEGIN_SRC bash
git diff $COMMIT_ID_1 $COMMIT_ID_2
#+END_SRC

*** ブランチの使い方
**** ブランチとは
- 「ひとまとまりの作業」を行う場所
- ソースコードなどの編集作業を始める際には
  必ず新しいブランチを作成する
- Gitの内部的にはあるコミットに対するエイリアス（alias）である

**** masterは大事なブランチ
- Gitリポジトリの初期化後，最初のコミットを行うとmasterブランチができる
- 非常に重要なブランチであり，
  ここで _直接編集作業を行ってはならない_
  - ただし，本演習や，個人でGitを利用する場合はこの限りではない

**** ブランチの作成と移動
- 新しいブランチ「new_branch」を作成して，なおかつ，そのブランチに移動する
  - 「-b」オプションで新規作成
  - オプションがなければ単なる移動（後述）

#+BEGIN_SRC bash
git checkout -b new_branch
#+END_SRC

- 本来，ブランチには _「これから行う作業の内容」_ が分かる名前を付ける

**** ブランチの確認
- ブランチの一覧と現在のブランチを確認する
  - もともとあるmasterと，新しく作成したnew_branchが表示される

#+BEGIN_SRC bash
git branch -vv
#+END_SRC

- ブランチに紐づくコミットのIDが同じことも確認
- git statusの一行目にも現在のブランチが表示される

**** ブランチでのコミット作成
- READMEに現在の日時を追加

#+BEGIN_SRC bash
date >> README
git add .
git commit -m 'Add date'
#+END_SRC

- 新しいコミットが追加できたことをgit logで確認
- git branch -vvでコミットのIDが変化したことも確認

**** ブランチの移動
- new_branchブランチでコミットした内容をmasterに反映させる
  - まずはmasterに移動する

#+BEGIN_SRC bash
git checkout master
#+END_SRC

- git status，git branch -vvで現在のブランチを確認すること
- この段階では，READMEファイルに行った変更が _反映されてない_ ことを
  確認すること

**** 変更をmasterにマージ
- new_branchで行ったコミットをmasterに反映させる

#+BEGIN_SRC bash
git merge new_branch
#+END_SRC

- READMEに更新が反映されたことを確認
- git branch -vvにより両ブランチのコミットIDが同じになったことも確認
- git logも確認しておきたい

**** マージ済みブランチの削除

- マージしたブランチはもはや不要なので削除して良い

#+BEGIN_SRC bash
git branch -d new_branch
#+END_SRC

- git branch -vvコマンドで削除を確認

*** コンフリクト
**** コンフリクトとは
- ファイルの同じ箇所を，異なる内容に編集すると発生する
- Gitはどちらの内容が正しいのかわからない
- 次のシナリオに従い，コンフリクトを発生させてみよう

**** コンフリクトのシナリオ
- 「のび太」の作業
  - nobitaブランチを作成する
  - READMEファイルの *一行目* を「Nobita's README.」に変更する
  - 変更をaddしてcommitする
- ここで一度， *masterブランチ* にもどる
  - READMEがもとのままだあることを確認
- 「しずか」の作業
  - shizukaブランチを作成する
  - READMEファイルの *一行目* を「Shizuka's file.」に変更する
  - 変更をaddしてcommitする

**** マージとコンフリクト発生
- masterブランチに移動する
- まず，nobitaブランチをマージ
  - 問題なくマージできる
- 次に，shizukaブランチをマージ
  - ここで *コンフリクトが発生* する

**** コンフリクト時のメッセージ
- mergeに失敗するとようなメッセージが出る

#+BEGIN_SRC text
Auto-merging README
CONFLICT (content): Merge conflict in README
Automatic merge failed; fix conflicts and then commit the result.
#+END_SRC

- また，git statusするとUnmerged pathes:の欄に，「both modified: README」
  と表示される

**** READMEファイルの内容
- READMEを開くとコンフリクトが起きた箇所がわかる

#+BEGIN_SRC text
<<<<<<< HEAD
Nobita's README.
=======
Shizuka's file.
>>>>>>> shizuka
（以下略）
#+END_SRC

- =======の上がマージ前のmasterブランチ，
  下がマージしようとしたshizukaブランチの内容

**** コンフリクトの解消
- テキストエディタで修正し，手動でコンフリクトを解消する

#+BEGIN_SRC text
Nobita & Shizuka's READMEfile.
（以下略）
#+END_SRC

**** 解消した結果をコミットする
- その後はいつもどおり，addしてcommitすれば作業が継続できる
  - マージ済みのmasterから新しくブランチを作成すること
- なお， _テキストエディタを用い，手動で正しくコンフリクトを解消する前でも
  commitできてしまう_ ので，この点には注意する

** リモートリポジトリを利用する（GitHub）
*** GitHubとは
**** GitHubでソーシャルコーディング
- ソーシャルコーディングのためのクラウド環境
  - [[https://github.com/][GitHub]]
  - [[http://github.co.jp/][GitHub Japan]]
- GitHubが提供する主な機能
  - GitHub flowによる協同開発
  - Pull requests
  - Issue / Wiki

**** GitHubアカウントの作成
- （まだなら）次のURLの指示に従いGitHubアカウントを作成
  - [[https://help.github.com/articles/signing-up-for-a-new-github-account/][Signing up for a new GitHub account - User Documentation]]
- アカウントの種類
  - 無料版で作成する場合「Join GitHub for Free」を選択する
  - 学生の場合「Student Developer Pack」にアップグレードすることもできる
- その後，確認メールが届くので，必要に応じて残りの手順を実施せよ
  - [[https://help.github.com/categories/setup/][GitHub Help]]

**** SSHによるGitHubアクセス
- GitHubへのアクセスはSSHを用いた公開鍵暗号方式の認証を用いる
  - SSH公開鍵の設定を行えば以降のパスワード認証が不要になる
- （まだなら）SSHを生成してGitHubに登録しなさい
  - 鍵を生成するとき「passphrases」が聞かれるが，この演習では何も入力しなくてよい
- 参考
  - [[https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent][Generating a new SSH key and adding it to the ssh-agent - GitHub Docs]]
  - [[https://help.github.com/articles/generating-an-ssh-key/][Generating an SSH key - User Documentation]]

*** リモートリポジトリ
**** リモート VS ローカルリポジトリ
- ローカルリポジトリ
  - git initコマンドを用いて作成したリポジトリを「ローカルリポジトリ」という
- リモートリポジトリ
  - 「リモートリポジトリ」とは，サーバ上にあるリポジトリであり，
    ローカルのリポジトリと連携させることができる
- リモートリポジトリの利点
  - ネットワークを経由してどこからでも利用することができる
  - 複数人のチームで協同作業をするときに活用できる
**** リモートリポジトリの作成
- リモートリポジトリをGitHubで作成する
  - 名前は「our_project」とする
- 次の手順で作成する
  - [[https://help.github.com/articles/creating-a-new-repository/][Creating a new repository - User Documentation]]
- READMEとライセンスを追加すること
  - 「Initialize this repository with a README」にチェックを入れる
  - 「Add a license:」から「MIT License」を選ぶ
**** GitHub flowによる開発の流れ
- GitHub flow
  - [[https://guides.github.com/introduction/flow/][Understanding the GitHub Flow · GitHub Guides]]

**** mainブランチについて
- git initでは最初にできるブランチは *master* である
- GitHubでリポジトリを作成した場合は *main* に変更された
  - [[https://github.blog/changelog/2020-10-01-the-default-branch-for-newly-created-repositories-is-now-main/][The default branch for newly-created repositories is now main | GitHub Changelog]]
- 以降、masterブランチとの記述は、必要に応じてmainブランチだと読み替えること
** GitHub flow
*** リモートリポジトリをローカルに複製
- リモートにあるリポジトリをローカルに複製することをcloneという
  - [[https://help.github.com/articles/cloning-a-repository/][Cloning a repository - User Documentation]]
- 下記の「$GITHUB_URL」の部分をGitHubのour_projectリポジトリURLにして実行
  - URLは「git@...」で始まるSSH接続用のものを用いる
    - リポジトリのURLはブラウザ用のURLとは異なるので注意！

#+begin_src bash
cd ~
git clone $GITHUB_URL
cd our_project
#+end_src

- この作業は基本的にはプロジェクトに対して一度だけ行うこと

*** mainから作業用ブランチを作成
- 作業用のブランチを作成して移動する
  - ブランチの名前は「greeting」とする

#+BEGIN_SRC bash
git checkout -b greeting
#+END_SRC

*** ブランチで編集作業を行う
- ここでは，hello.txtという名前のファイルを作成する

#+BEGIN_SRC bash
echo 'Hello GitHub' > hello.txt
#+END_SRC

*** ブランチでコミットを作成
- 変更した内容をステージングしてからコミットする

#+BEGIN_SRC bash
git add .
git commit -m 'Create hello.txt'
#+END_SRC

- この編集，add，commitの作業は作業が一区切りつくまで何回も繰り返してよい…
  - が，こまめにpushするのが良いとされる

*** ブランチをリモートに送る
- ブランチで作成したコミットをリモートに送る
  - 下記のoriginはリポジトリのURLの別名として自動で設定されているもの
  - greetingは作業しているブランチ名

#+begin_src bash
git push -u origin greeting
#+end_src

*** GitHubでプルリクエストを送る
- ブランチがGitHubに登録されたことを確認し，Pull requestを作成する
- 手順は次のとおり
  - [[https://help.github.com/articles/using-pull-requests/][Using pull requests - User Documentation]] の前半
  - [[https://help.github.com/articles/creating-a-pull-request/][Creating a pull request - User Documentation]]

*** GitHubでレビュー（＋自動テスト）
- プルリクエストを用いたレビューの方法は下記参照
  - [[https://help.github.com/articles/using-pull-requests/][Using pull requests - User Documentation]] の後半
- 人手によるレビューの他，自動的なテストも行うのが望ましい（説明は省略）

*** GitHubでプルリクエストをマージ
- Pull requestのレビューが済んだらマージする
  - [[https://help.github.com/articles/merging-a-pull-request/][Merging a pull request - User Documentation]]
- マージが完了したら，ローカル・リモート共に，マージ済みのブランチは削除してよい

*** ローカルのmainを最新版にする
- GitHubで行ったマージをローカルに反映させる
  - mainブランチに移動してgit pull
  - 不要になった作業用ブランチは削除

#+begin_src bash
git checkout main
git pull
git branch -d greeting
#+end_src

*** GitHub Flowに習熟する！                                          :演習:
- ここで手順2:（[[mainから作業用ブランチを作成]]節）に戻り，
  一連の作業を複数回（5回以上!）繰り返すこと
  - *体に叩き込む！*

*** GitHub Pagesを作成する                                           :演習:
- GitHubをWebブラウザで開く
- プロジェクトの =Settings -> Pages (side menu)= でGitHub Pagesを開く
- Sourceの項目にある =None= を =main= ブランチに変える
  - Save ボタンを押すとプロジェクト用のURLが表示されるので、控えておく
- index.htmlファイルを作成しHTML書く
- add/commit/pushを適切に行い、GitHubにindex.htmlをアップロードする
- 先程控えたURLにブラウザでアクセスし、作成したHTMLによるページが表示されることを確認

* チーム演習編
:PROPERTIES:
:ID:       e7ca6ad2-0c73-4e01-9bef-01fcc4496f50
:CUSTOM_ID: team
:END:
** 演習のための準備
*** 概要
- この演習では、最終的に全員でHTMLによるWebサイトを作ることを目指す
- GitHub Pagesの機能を用いる
- Webサイトの例
  - 架空の会社のホームページ
  - 架空の商品紹介ページ
  - 架空の…

*** リモートリポジトリの作成
- チームの代表者1名がGitHubでリポジトリを作成する
  - 名前は「team_project」とする
- 次の手順で作成する
  - [[https://help.github.com/articles/creating-a-new-repository/][Creating a new repository - User Documentation]]
- READMEとライセンスを追加すること
  - 「Initialize this repository with a README」にチェックを入れる
  - 「Add a license:」から「MIT License」を選ぶ

*** コラボレーターの追加
- 代表者は残りのメンバーを協同作業者（コラボレータ）として追加する
  - [[https://help.github.com/articles/inviting-collaborators-to-a-personal-repository/][Inviting collaborators to a personal repository - User Documentation]]
- 招待されたメンバーには確認のメールが届く
  - これにより，全員がGitHubのリポジトリにpushできるようになる

*** リポジトリのclone
- 全員，リポジトリをローカルにcloneする
  - [[https://help.github.com/articles/cloning-a-repository/][Cloning a repository - User Documentation]]

#+BEGIN_SRC bash
cd ~
git clone $GITHUB_URL
cd team_project
#+END_SRC

** チーム演習
*** 課題1: GitHubのIssue/Wikiを学ぶ
- リポジトリのIssue機能を使ってみよう
  - 一人1つIssueを登録する
  - メンバーのIssueに挨拶する（投稿する）
  - 終わったらIssueを閉じてみる
- リポジトリのWikiを使ってみよう
  - Wikiを使ってチームメンバーの自己紹介をしてみよう
- なお，この演習にあまり時間をかけてはならない

*** 課題2: まずは全員1回pushしよう
- 全員1回，最初のGitHub Flowを成功させよう
- GitHubのアカウント名（$GITHUB_NAME）でブランチを切り，コミットするファイルを作る
- ファイル名は各自の＋「.html」とする

#+BEGIN_SRC bash
git checkout -b $GITHUB_NAME
# エディタで$GITHUB_NAME.htmlを作成
git add $GITHUB_NAME.html
git commit -m '＜メッセージ＞'
git push -u origin $GITHUB_NAME
#+END_SRC

*** 課題3: プルリクエストの作成
- pushしたブランチからプルリクエストを出してみよう
- 他のメンバーのプルリクエストにコメントしてみよう

*** 課題4: マージの練習
- プルリクエストを出した人が自分でマージしてみよう
- この段階でコンフリクトが出ることはないはず
  （同じファイルを編集していない）だが，もし
  マージできない場合は，プルリクエストを削除し，
  課題2からやり直す

*** 課題5: 全員のmainを最新にする
- 全員のローカルのmainブランチを最新にする
- 各自次のコマンドを実行

#+BEGIN_SRC bash
git pull
#+END_SRC

- ローカルに他のメンバーが作成したファイルができているか確認

*** 課題6: 再びブランチをpushする
- まず，mainが最新版であることを確認
- 作業を決めて， *作業の内容がわかりやすい名前* でブランチを作る
- =$GITHUB_NAME.html= に，中身を追加してみよう（内容は何でも良い）
- =git add/commit/push= を正確に実行しよう
- ブランチが無事pushできたら，GitHubをブラウザで確認する

*** 課題7: 再びプルリクエストとマージ
- 再びプルリクエストとマージを行ってみよう
- プルリクエストのコメントには顔文字なども
  利用できるので活用してみよう
  - やり方は各自で調べること
- 今度は他のメンバーにマージを依頼しても良い

*** 課題8: 何回も繰り返す
- 同じファイルに更なる変更を加え，GitHub Flowを回してみよう
- これを最低3回は繰り返したい

*** 課題9: ぼちぼちコンフリクト
- 誰かが空の「index.html」ファイルを作成する
- 全員でindex.htmlを編集してみよう
  - $MY_FILEへのリンクを貼る
- pushしてプルリクエストを出してみる
- 何人かはコンフリクトになるはずだ

*** 課題10: コンフリクトの解消
- コンフリクトが出たメンバーは，それを解消してみよう
- コンフリクトが出なかったメンバーは，コンフリクトが出ているメンバーの
  作業を見る
  - 困っていたら助けてあげよう

*** 課題11: Webサイトを作ってみよう
- チームで内容を相談し，Webサイトを作ってみよう
- index.htmlや$MY_FILE以外にもファイルを追加して
  素敵なWebサイトを作ろう
- 可能ならばCSSやJavaScriptを使っても良いが必須ではない
** GitHubでのコンフリクトと解消方法
*** GitHub flow におけるコンフリクトについて
- コンフリクトとは？
  - コンフリクトは、コードの同じ箇所を複数の人が別々に編集すると発生
- コンフリクトが起きると？
  - GitHub に提出した Pull requests が自動的にマージできない

*** コンフリクトへの基本的な対処法
- 初心者は、演習の最初の方では「他人と同じファイルを編集しない」こと
  にして、操作になれる
  - 上達したら積極的にコンフリクトを起こしてみて、その解決方法を学ぶ
- コミットはできるだけ細かく作成すると良い
  - その分，他の人とかち合う可能性が減る

*** GitHubでのコンフリクトの解消
- nobitaとshizukaのシナリオでnobitaの作業がGitHubでマージされたとする
  - shizukaが作成したPull requestはマージできなくなる
- ローカルのmainブランチを最新版にする
  - pullを行う
- shizukaブランチでmainの内容をmergeする
  - その後、手動でコンフリクトを解消
- 再度shizukaをpushして、プルリクエストがマージ可能になれば成功

*** GitHubでのコンフリクトの解消方法（一例）
#+begin_src bash
# ローカルのmainを最新に
git checkout main
git pull
# shizukaに移動してマージ
git checkout shizuka
git merge main
# ここでコンフリクトを解消する
git add .
git commit -m 'Merge'
git push -u origin shizuka
#+end_src

* 参考資料
** より進んだGitの操作
*** ファイルの削除と名前の変更
**** Gitに無視させたいファイル
- ツールが生成する中間ファイルなど，Gitで管理させたくないファイルは
  予め「.gitignore」ファイルに記述しておく
- なお，「.gitignore」ファイル自体はGitがトラッキングするファイルに含める
- .gitignoreの書き方については各自で調べよ

**** Gitが追跡するファイルの削除と名前の変更
- Gitが追跡しているファイルであっても，
  シェルのrmコマンドやmvコマンドで削除や名前の変更をしてよい
- 「git add .」コマンドを実行すると，Gitは削除や名前の変更も
  自動的に検知する
  - 「git rm」や「git mv」は使わなくてよい
*** 操作を取り消すコマンド
**** Gitで行った操作の取り消し
- まちがって
  - ファイルをステージングさせた！
  - ステージングをコミットした！
- などの場合，操作を取り消すことができる
  - 特定のファイルの変更の取り消し
  - 特定のコミットの取り消し

**** HEADによるコミットの指定
- 特定のコミットのIDを指定する方法に「HEAD」を使った相対指定がある
  - showコマンドで確認しながら用いると良い（下記はサンプル）

#+BEGIN_SRC bash
git show HEAD~1
git show HEAD~1^2
#+END_SRC

**** ステージング/コミットの修正
ファイルのステージングを取り消す

#+BEGIN_SRC bash
git reset $FILE
#+END_SRC

$COMMIT_IDより後のコミットの取り消し（ローカルは保存）

#+BEGIN_SRC bash
git reset $COMMIT_ID
#+END_SRC

$COMMIT_IDより後のコミットの取り消し（ローカルの変更も破棄）

#+BEGIN_SRC bash
git reset --hard $COMMIT_ID
#+END_SRC

**** 誤って編集や削除や修正したファイルの回復
- file.txtを誤って編集や削除した場合
- addする前
  - ステージング領域からの取り出し

#+BEGIN_SRC bash
git checkout file.txt
#+END_SRC

- addした後
  - 直近のコミットからの取り出し

#+BEGIN_SRC bash
git checkout HEAD file.txt
#+END_SRC

**** push済みのコミットの取り消し
- 最後に行ったコミットが理由でコンフリクトが発生したような場合，
  次の操作により，「取り消しコミット」を作成することができる

#+BEGIN_SRC bash
git revert HEAD
#+END_SRC

- 最後の作業が取り消されていることを確認
- その後は，この取り消しコミットをpushすると，
  リモートでの変更内容も取り消される

*** 作業の一度中断と再開
**** やりかけの作業のstash
- あるブランチで作業中に他のブランチに
  一時的に移動したいことがある
  - 作業の途中でmainブランチを最新にする，など
- このような場合，git stashコマンドが活用できる
  ので調べてみよ
*** その他知っておくと良いコマンド
**** ステージングしたファイルの差分表示
- git addでステージングするとgit diffで差分が表示されない
- この場合，次のコマンドで確認できる

#+BEGIN_SRC bash
git diff --staged
#+END_SRC

**** 特定のファイルにのみ関連する履歴確認
- 特定のファイルの履歴のみ確認する

#+BEGIN_SRC bash
git log --follow README
#+END_SRC

**** リモートブランチの最新情報を取得
- git fetchはリモートにあるブランチの最新情報を
  ローカルに取ってくるコマンド
- 例えば，git pullはmasterブランチで次の２つを実行することと同じ意味

#+BEGIN_SRC bash
git fetch origin
git merge origin/master
#+END_SRC

**** git ls-files
- 省略
